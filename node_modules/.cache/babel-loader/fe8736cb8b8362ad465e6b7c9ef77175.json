{"ast":null,"code":"import React, { cloneElement } from 'react';\nimport { isElement, createEventHandler } from '@mantine/utils';\nimport { useMenuContext } from '../Menu.context.js';\nimport { MENU_ERRORS } from '../Menu.errors.js';\nimport { Popover } from '../../Popover/Popover.js';\n\nfunction MenuTarget(_ref) {\n  let {\n    children,\n    refProp = \"ref\"\n  } = _ref;\n\n  if (!isElement(children)) {\n    throw new Error(MENU_ERRORS.children);\n  }\n\n  const ctx = useMenuContext();\n  const onClick = createEventHandler(children.props.onClick, () => ctx.trigger === \"click\" && ctx.toggleDropdown());\n  const onMouseEnter = createEventHandler(children.props.onMouseEnter, () => ctx.trigger === \"hover\" && ctx.openDropdown());\n  const onMouseLeave = createEventHandler(children.props.onMouseLeave, () => ctx.trigger === \"hover\" && ctx.closeDropdown());\n  return /* @__PURE__ */React.createElement(Popover.Target, {\n    refProp,\n    popupType: \"menu\"\n  }, cloneElement(children, {\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    \"data-expanded\": ctx.opened ? true : void 0\n  }));\n}\n\nMenuTarget.displayName = \"@mantine/core/MenuTarget\";\nexport { MenuTarget };","map":{"version":3,"mappings":";;;;;;AAKO,SAASA,UAAT,OAAmD;EAAA,IAA/B;IAAEC,QAAF;IAAYC,OAAO,GAAG;EAAtB,CAA+B;;EACxD,IAAI,CAACC,SAAS,CAACF,QAAD,CAAd,EAA0B;IACxB,MAAM,IAAIG,KAAJ,CAAUC,WAAW,CAACJ,QAAtB,CAAN;EACD;;EACD,MAAMK,GAAG,GAAGC,cAAc,EAA1B;EACA,MAAMC,OAAO,GAAGC,kBAAkB,CAACR,QAAQ,CAACS,KAAT,CAAeF,OAAhB,EAAyB,MAAMF,GAAG,CAACK,OAAJ,KAAgB,OAAhB,IAA2BL,GAAG,CAACM,cAAJ,EAA1D,CAAlC;EACA,MAAMC,YAAY,GAAGJ,kBAAkB,CAACR,QAAQ,CAACS,KAAT,CAAeG,YAAhB,EAA8B,MAAMP,GAAG,CAACK,OAAJ,KAAgB,OAAhB,IAA2BL,GAAG,CAACQ,YAAJ,EAA/D,CAAvC;EACA,MAAMC,YAAY,GAAGN,kBAAkB,CAACR,QAAQ,CAACS,KAAT,CAAeK,YAAhB,EAA8B,MAAMT,GAAG,CAACK,OAAJ,KAAgB,OAAhB,IAA2BL,GAAG,CAACU,aAAJ,EAA/D,CAAvC;EACA,sBAAuBC,KAAK,CAACC,aAAN,CAAoBC,OAAO,CAACC,MAA5B,EAAoC;IACzDlB,OADyD;IAEzDmB,SAAS,EAAE;EAF8C,CAApC,EAGpBC,YAAY,CAACrB,QAAD,EAAW;IACxBO,OADwB;IAExBK,YAFwB;IAGxBE,YAHwB;IAIxB,iBAAiBT,GAAG,CAACiB,MAAJ,GAAa,IAAb,GAAoB,KAAK;EAJlB,CAAX,CAHQ,CAAvB;AASD;;AACDvB,UAAU,CAACwB,WAAX,GAAyB,0BAAzB","names":["MenuTarget","children","refProp","isElement","Error","MENU_ERRORS","ctx","useMenuContext","onClick","createEventHandler","props","trigger","toggleDropdown","onMouseEnter","openDropdown","onMouseLeave","closeDropdown","React","createElement","Popover","Target","popupType","cloneElement","opened","displayName"],"sources":["/home/filipe-smart/www/Estudos/rd_station/node_modules/@mantine/core/src/Menu/MenuTarget/MenuTarget.tsx"],"sourcesContent":["import React, { cloneElement } from 'react';\nimport { isElement, createEventHandler } from '@mantine/utils';\nimport { useMenuContext } from '../Menu.context';\nimport { Popover } from '../../Popover';\nimport { MENU_ERRORS } from '../Menu.errors';\n\nexport interface MenuTargetProps {\n  /** Target element */\n  children: React.ReactNode;\n\n  /** Key of the prop that should be used to get element ref */\n  refProp?: string;\n}\n\nexport function MenuTarget({ children, refProp = 'ref' }: MenuTargetProps) {\n  if (!isElement(children)) {\n    throw new Error(MENU_ERRORS.children);\n  }\n\n  const ctx = useMenuContext();\n\n  const onClick = createEventHandler(\n    children.props.onClick,\n    () => ctx.trigger === 'click' && ctx.toggleDropdown()\n  );\n\n  const onMouseEnter = createEventHandler(\n    children.props.onMouseEnter,\n    () => ctx.trigger === 'hover' && ctx.openDropdown()\n  );\n\n  const onMouseLeave = createEventHandler(\n    children.props.onMouseLeave,\n    () => ctx.trigger === 'hover' && ctx.closeDropdown()\n  );\n\n  return (\n    <Popover.Target refProp={refProp} popupType=\"menu\">\n      {cloneElement(children, {\n        onClick,\n        onMouseEnter,\n        onMouseLeave,\n        'data-expanded': ctx.opened ? true : undefined,\n      })}\n    </Popover.Target>\n  );\n}\n\nMenuTarget.displayName = '@mantine/core/MenuTarget';\n"]},"metadata":{},"sourceType":"module"}