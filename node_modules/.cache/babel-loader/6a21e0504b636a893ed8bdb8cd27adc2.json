{"ast":null,"code":"function mergeClassNames(_ref) {\n  let {\n    cx,\n    classes,\n    context,\n    classNames,\n    name\n  } = _ref;\n  const contextClassNames = context.reduce((acc, item) => {\n    Object.keys(item.classNames).forEach(key => {\n      if (typeof acc[key] !== \"string\") {\n        acc[key] = `${item.classNames[key]}`;\n      } else {\n        acc[key] = `${acc[key]} ${item.classNames[key]}`;\n      }\n    });\n    return acc;\n  }, {});\n  return Object.keys(classes).reduce((acc, className) => {\n    acc[className] = cx(classes[className], contextClassNames[className], classNames != null && classNames[className], Array.isArray(name) ? name.filter(Boolean).map(part => `mantine-${part}-${className}`).join(\" \") : name ? `mantine-${name}-${className}` : null);\n    return acc;\n  }, {});\n}\n\nexport { mergeClassNames };","map":{"version":3,"mappings":"AAAO,SAASA,eAAT,OAMJ;EAAA,IAN6B;IAC9BC,EAD8B;IAE9BC,OAF8B;IAG9BC,OAH8B;IAI9BC,UAJ8B;IAK9BC;EAL8B,CAM7B;EACD,MAAMC,iBAAiB,GAAGH,OAAO,CAACI,MAAR,CAAe,CAACC,GAAD,EAAMC,IAAN,KAAe;IACtDC,MAAM,CAACC,IAAP,CAAYF,IAAI,CAACL,UAAjB,EAA6BQ,OAA7B,CAAsCC,GAAD,IAAS;MAC5C,IAAI,OAAOL,GAAG,CAACK,GAAD,CAAV,KAAoB,QAAxB,EAAkC;QAChCL,GAAG,CAACK,GAAD,CAAH,GAAY,GAAEJ,IAAI,CAACL,UAAL,CAAgBS,GAAhB,CAAqB,EAAnC;MACD,CAFD,MAEO;QACLL,GAAG,CAACK,GAAD,CAAH,GAAY,GAAEL,GAAG,CAACK,GAAD,CAAM,IAAGJ,IAAI,CAACL,UAAL,CAAgBS,GAAhB,CAAqB,EAA/C;MACD;IACF,CAND;IAOA,OAAOL,GAAP;EACD,CATyB,EASvB,EATuB,CAA1B;EAUA,OAAOE,MAAM,CAACC,IAAP,CAAYT,OAAZ,EAAqBK,MAArB,CAA4B,CAACC,GAAD,EAAMM,SAAN,KAAoB;IACrDN,GAAG,CAACM,SAAD,CAAH,GAAiBb,EAAE,CAACC,OAAO,CAACY,SAAD,CAAR,EAAqBR,iBAAiB,CAACQ,SAAD,CAAtC,EAAmDV,UAAU,IAAI,IAAd,IAAsBA,UAAU,CAACU,SAAD,CAAnF,EAAgGC,KAAK,CAACC,OAAN,CAAcX,IAAd,IAAsBA,IAAI,CAACY,MAAL,CAAYC,OAAZ,EAAqBC,GAArB,CAA0BC,IAAD,IAAW,WAAUA,IAAK,IAAGN,SAAU,EAAhE,EAAmEO,IAAnE,CAAwE,GAAxE,CAAtB,GAAqGhB,IAAI,GAAI,WAAUA,IAAK,IAAGS,SAAU,EAAhC,GAAoC,IAA7O,CAAnB;IACA,OAAON,GAAP;EACD,CAHM,EAGJ,EAHI,CAAP;AAIF","names":["mergeClassNames","cx","classes","context","classNames","name","contextClassNames","reduce","acc","item","Object","keys","forEach","key","className","Array","isArray","filter","Boolean","map","part","join"],"sources":["/home/filipe-smart/www/Estudos/rd_station/node_modules/@mantine/styles/src/tss/utils/merge-class-names/merge-class-names.ts"],"sourcesContent":["import { useMantineProviderStyles } from '../../../theme/MantineProvider';\n\ninterface Input<T extends Record<string, string>> {\n  cx(...classNames: any): string;\n  classes: T;\n  context: ReturnType<typeof useMantineProviderStyles>;\n  classNames: Partial<T>;\n  name: string | string[];\n}\n\nexport function mergeClassNames<T extends Record<string, string>>({\n  cx,\n  classes,\n  context,\n  classNames,\n  name,\n}: Input<T>) {\n  const contextClassNames = context.reduce<Record<string, string>>((acc, item) => {\n    Object.keys(item.classNames).forEach((key) => {\n      if (typeof acc[key] !== 'string') {\n        acc[key] = `${item.classNames[key]}`;\n      } else {\n        acc[key] = `${acc[key]} ${item.classNames[key]}`;\n      }\n    });\n\n    return acc;\n  }, {});\n\n  return Object.keys(classes).reduce((acc, className) => {\n    acc[className] = cx(\n      classes[className],\n      contextClassNames[className],\n      classNames != null && classNames[className],\n      Array.isArray(name)\n        ? name\n            .filter(Boolean)\n            .map((part) => `mantine-${part}-${className}`)\n            .join(' ')\n        : name\n        ? `mantine-${name}-${className}`\n        : null\n    );\n    return acc;\n  }, {}) as T;\n}\n"]},"metadata":{},"sourceType":"module"}